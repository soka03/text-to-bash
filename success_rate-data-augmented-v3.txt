('Task: /proc 아래의 모든 파일/디렉토리를 찾고, 각각에 대해 ls 명령을 실행하라.', 'find /proc | xargs ls', "find /proc -exec ls '{}' \\;<|end_of_text|>")
('Task: "~" (홈 디렉토리가 아닌)라는 이름의 디렉토리로 이동한다.', 'cd ~/not_home', 'cd "~"<|end_of_text|>')
('Task: /raid 디렉토리 안에 있는 모든 local_sd_customize 확장자를 가진 폴더를 찾아라.', 'find /raid -type d -name "*.local_sd_customize"', 'find /raid -type d -name ".local_sd_customize" -print<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 *.conf 및 *.txt 파일을 검색하십시오.', 'find. -type f \\( -name "*.conf" -o -name "*.txt" \\)', 'find . -type f \\( -name "*.conf" -or -name "*.txt" \\) -print<|end_of_text|>')
('Task: 현재 디렉토리에서 모든 *shp* 파일/디렉토리를 찾아 ../shp_all/로 이동합니다.', 'find. -name "*shp*" -exec mv {}../shp_all/ \\;', 'find . -name "*shp*" -exec mv {} ../shp_all/ \\;<|end_of_text|>')
('Task: /var/log 디렉토리에서 anaconda.* 패턴을 대소문자 구분 없이 검색하여 마지막으로 발견된 파일의 아카이브(file.tar)를 생성합니다.', 'find /var/log/ -iname anaconda.* | tail -n 1 | xargs tar -cvf file.tar', 'find /var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \\;<|end_of_text|>')
('Task: 일반 파일을 찾아서 세계가 읽을 수 있는지 확인합니다.', 'find. -type f -perm -o=r', 'find . -perm -g=r -type f -exec ls -l {} \\;<|end_of_text|>')
('Task: 현재 디렉토리에 있는 모든 파일 중에서 test로 시작하는 파일의 내용을 대소문자를 구분하지 않고 보여줍니다.', "find. -iname 'test*' | xargs cat", "find . -iname '*test*' -exec cat {} \\;<|end_of_text|>")
('Task: 현재 폴더에서 지난 60분 안에 수정된 모든 정규 파일의 상세 목록을 보여줍니다.', 'find. -mmin -60 -type f -exec ls -l {} \\;', 'find . -mmin -60 -type f -ls<|end_of_text|>')
('Task: 현재 폴더에서 모든 텍스트 파일을 찾아 삭제합니다.', 'find. -type f -name "*.txt" -print0 | xargs -0 rm', 'find . -name ".txt" -exec rm "{}" \\;<|end_of_text|>')
('Task: 모든 cron 작업 중에서 "word"를 포함하는 것들을 나열합니다.', 'crontab -l | grep word', 'crontab -l | egrep "word"<|end_of_text|>')
('Task: 모든 *.txt 파일의 내용을 홈 디렉토리에서 출력하라.', "find ~/ -name '*.txt' -exec cat {} +", "find ~ -name '*.txt' -print0 | xargs -0 cat<|end_of_text|>")
('Task: 현재 디렉토리 트리에서 최근 60분 내에 접근된 파일을 찾아보세요.', 'find. -amin -60', 'find . -amin -60<|end_of_text|>')
('Task: 모든 버그질라 하위 디렉토리의 권한을 775로 만듭니다.', 'find bugs -type d -exec chmod 775 {} \\;', 'find bugzilla -type d -exec chmod 775 {} \\;<|end_of_text|>')
('Task: 모든 Subscription.java 파일이나 디렉토리를 현재 디렉토리에서 찾아서, 발견된 첫 번째의 부모 디렉토리로 이동하세요.', 'cd $(find. -name Subscription.java | xargs dirname)', 'cd $(find . -name Subscription.java | xargs dirname)<|end_of_text|>')
('Task: 마스터 ssh 연결 "officefirewall"이 종료하도록 요청하십시오.', 'ssh -O exit officefirewall', 'ssh -O exit officefirewall<|end_of_text|>')
('Task: ".snapshot" 디렉토리에 있는 것들을 포함하여 ".foo"로 끝나는 모든 파일을 표시합니다. 이것은 prune를 사용하는 잘못된 방법입니다.', "find. -name.snapshot -prune -o -name '*.foo' -print", "find . \\( -name .snapshot -prune -o -name '*.foo' \\) -print<|end_of_text|>")
("Task: 쉘 옵션 'nounset'을 설정합니다.", 'shopt -s nounset', 'shopt -s -o nounset<|end_of_text|>')
('Task: /var/www 및 그 아래에서 마지막 10분 동안 변경된 모든 일반 파일을 나열합니다.', 'find /var/www -type f -cmin -10', 'find /var/www -cmin -10 -type f -printf "%c %pn"<|end_of_text|>')
('Task: "$path" 아래에 정렬된 모든 파일의 md5 합의 md5 합을 계산합니다.', 'find "$path" -type f | sort | xargs md5sum | md5sum', 'find "$path" -type f -print0 | sort -z | xargs -r0 md5sum | md5sum<|end_of_text|>')
('Task: 전체 파일 시스템에서 소유자, 그룹, 기타 사용자 중 하나라도 "쓰기" 비트가 설정된 모든 파일/디렉토리를 찾습니다.', 'find / -perm -u+w,g+w,o+w', 'find / -perm /222<|end_of_text|>')
('Task: /your/project" 디렉토리 트리 아래에 있는 "CONFIGFILE"을 제외한 모든 파일에 대해 현재 디렉토리에 심볼릭 링크를 만듭니다.', "find /your/project -not -name 'CONFIGFILE' -exec ln -s \\{\\}./ \\;", "find /your/project -type f ! -name 'CONFIGFILE' -exec ln -s \\{\\} ./ \\;<|end_of_text|>")
("Task: 도메인 '_etcd-client._tcp.'의 로컬 SRV 레코드를 출력합니다.", 'dig -t SRV _etcd-client._tcp.', 'dig @"127.0.0.1"  _etcd-client._tcp. SRV<|end_of_text|>')
('Task: 권한이 777인 모든 파일을 현재 디렉토리에서 찾아라', 'find. -perm 777 -print', 'find . -type f -perm 0777 -print<|end_of_text|>')
('Task: /path/to/dir 아래의 모든 파일/디렉토리를 찾고, 디렉토리 권한을 0755로, 파일 권한을 0644로 설정하라.', 'find /path/to/dir -type f -exec chmod 0644 {} \\; -o -type d -exec chmod 0755 {} \\;', "find /path/to/dir -type d -exec chmod 0755 '{}' \\; -o -type f -exec chmod 0644 '{}' \\;<|end_of_text|>")
("Task: 파일 이름에 *2011*이 포함된 파일을 찾아서 'From: Ralph' 문자열을 검색합니다.", 'find. -name "*2011*" -exec grep "From: Ralph" {} \\;', "find . -name '*2011*' -print | xargs -n2 grep 'From: Ralph'<|end_of_text|>")
('Task: /opt 디렉터리에서 파일 크기가 0 바이트인 모든 빈 파일을 나열합니다.', 'find /opt -type f -empty', 'find /opt -type f -empty<|end_of_text|>')
('Task: kat 폴더에서 모든 파일을 표시합니다.', 'find kat', 'find kat -printf "%f\\n"<|end_of_text|>')
('Task: 현재 디렉토리 아래의 각 파일의 내용을 해당 파일 이름 다음에 출력하라', 'cat $(find.)', 'find . -type f -exec cat {} \\; -print<|end_of_text|>')
('Task: "date.csv"을 최대 100줄씩 분할합니다.', 'split -l 100 date.csv', 'split -l 100 date.csv<|end_of_text|>')
("Task: 현재 디렉토리에서 이름이 'onlyme'로 시작하는 모든 파일 및 디렉토리를 최대 2단계 깊이로 찾아라.", "find. -maxdepth 2 -name 'onlyme*'", "find . -maxdepth 2 -name 'onlyme*'<|end_of_text|>")
("Task: 홈 디렉터리 내의 junk 폴더에서 'cart1' 파일을 찾고, 그 폴더를 ~/junk/A로 옮기세요.", 'find ~/junk -name cart1 -exec mv {} ~/junk/A \\;', "find ~/junk  -name 'cart1' -exec mv {} ~/junk/A \\;<|end_of_text|>")
('Task: "lpi104-6" 및 "research/lpi104-6"에서 경로명이 "file1"로 끝나는 파일로의 심볼릭 링크 찾기', 'find lpi104-6 research/lpi104-6 -lname \\*file1', 'find lpi104-6 research/lpi104-6 -lname "*file1"<|end_of_text|>')
('Task: 호스트의 현재 IP 주소를 출력하세요.', 'hostname -I', 'hostname -I|cut -d" " -f 1<|end_of_text|>')
('Task: 이름이 33자인 현재 디렉토리 트리의 디렉토리를 찾아라.', "find. -type d -name '?????????????????????????????????'", 'find . -type d -name "?????????????????????????????????"<|end_of_text|>')
('Task: 모든 디렉토리를 현재 폴더에서 나열합니다.', 'find. -type d -exec ls -dlrt {} \\;', 'ls -d ./*/<|end_of_text|>')
("Task: 파일 xyz.c를 ./C 디렉토리와 그 아래의 모든 '.c' 확장자 파일들에 복사하는 'cp' 명령어를 출력합니다.", 'find./C -name "*.c" -print0 | xargs -0 echo cp xyz.c', 'find ./C -name "*.c" | xargs -n1  echo cp xyz.c<|end_of_text|>')
('Task: FFF" 폴더 안의 모든 텍스트 파일을 찾아 md5sum을 구하세요.', 'find FFF -name "*.txt" -exec md5sum {} \\;', 'find FFF -name "*.txt" -exec md5sum \'{}\' \\;<|end_of_text|>')
("Task: 경로에 'bin'이 포함된 모든 폴더에서 'ssh' 파일을 찾아라", 'find /home -name ssh | grep bin', 'dirname `find / -name ssh | grep bin`<|end_of_text|>')
('Task: 현재 폴더에서 "myfile" 확장자 뒤에 두 자리 숫자가 붙은 모든 파일을 표시합니다.', 'find. -name "myfile[0-9][0-9]"', "find . -regex '.*myfile[0-9][0-9]?'<|end_of_text|>")
('Task: my_script.py"의 내용을 표시하라', 'cat my_script.py', 'cat my_script.py<|end_of_text|>')
('Task: 모든 .jpg 파일을 현재 디렉토리와 그 하위 디렉토리에서 찾습니다.', 'find -name “*.jpg”', 'find . -name “*.jpg”<|end_of_text|>')
('Task: 현재 디렉토리의 모든 "*.txt" 파일에서 "texthere"라는 문자열을 재귀적으로 검색합니다.', 'find. -name "*.txt" -print0 | xargs -0 grep "texthere"', 'grep -r --include "*.txt" texthere .<|end_of_text|>')
('Task: 모든 빈 파일(0 바이트 파일)을 홈 디렉토리와 그 하위 디렉토리에서 찾습니다.', 'find ~ -empty', 'find ~ -empty<|end_of_text|>')
('Task: /home/peter 디렉토리 트리 내에서 모든 파일 중 이름이 "~"로 끝나는 것을 삭제하십시오.', "find /home/peter -name '*~' -delete", 'find /home/peter -name *~ -print0 |xargs -0 rm<|end_of_text|>')
('Task: 모든 텍스트 파일을 /home 폴더에서 검색합니다.', 'find /home -type f -name "*.txt"', 'find /home -name *.txt<|end_of_text|>')
('Task: /tmp/에 10자리 접미사를 가진 임시 폴더를 기본적으로 생성합니다.', 'mktemp -d -t tmp.XXXXXX /tmp', 'mktemp -d -t<|end_of_text|>')
('Task: 파일 시스템에서 이름이 25자 미만인 일반 파일을 검색합니다.', 'find / -type f -name \\? -o -namefind / -type f|egrep "/[^/]{0,24}$"<|end_of_text|>')
("Task: 현재 디렉토리 트리 아래에서 이름에 'blah'가 포함되어 있고 최근 2일 이내에 수정된 모든 파일/디렉토리를 찾아보세요. (대소문자 무시)", 'find. -iname *blah* -mtime -2', "find . -iname '*blah*' \\( -type d -o -type f \\) -mtime -2<|end_of_text|>")
('Task: Perl 파일인 *.pl 파일들에 대한 긴 목록을 현재 디렉토리 아래에서 제공한다.', 'find. -name "*.pl" -exec ls -l {} \\;', 'find . -name "*.pl" -exec ls -ld {} \\;<|end_of_text|>')
('Task: find의 디버깅 옵션에 대한 설명을 표시합니다.', 'man find', 'find -D help<|end_of_text|>')
("Task: '/var/log' 디렉토리 트리 아래에 있는 모든 파일과 디렉토리를 오늘 하루 시작 이후 수정된 것으로 찾아라.", 'find /var/log -daystart -type [fB] -mtime 0', 'find /var/log -daystart -mtime 0<|end_of_text|>')
('Task: 시스템에서 최근 50일 이내에 생성된 파일을 찾아보세요.', 'find / -mtime -50', 'find / -ctime -50<|end_of_text|>')
("Task: 파일 시스템에서 이름이 'filename'인 모든 파일을 검색하라", 'find / -name filename', 'find / -iname "filename"<|end_of_text|>')
('Task: /path/to/foo.txt를 가리키는 모든 링크를 찾아라', "find / -lname '/path/to/foo.txt'", 'find . -lname /path/to/foo.txt<|end_of_text|>')
("Task: 현재 폴더의 목록을 'OUTPUT' 변수에 저장합니다.", 'OUTPUT=$(ls)', 'OUTPUT="$(ls -1)"<|end_of_text|>')
("Task: 'foo'라는 이름을 가진 파일이나 디렉토리를 현재 디렉토리 트리에서 찾지만, 'foo'라는 이름의 디렉토리 안으로는 들어가지 않습니다.", 'find. -name foo -type d -prune -o -name foo', 'find . -name foo -type d -prune -o -name foo -print<|end_of_text|>')
("Task: gzipped 파일 'bigfile.z'의 500번째 줄부터 1000번째 줄까지 보기", 'zless bigfile.z 1000 | head -n-500', 'zcat bigfile.z | tail -n +500 | head -501<|end_of_text|>')
('Task: 하위 디렉토리를 검색하지 않고 현재 폴더에 있는 모든 빈 파일을 삭제한다', "find. -maxdepth 1 -size 0c -exec rm '{}' \\;", 'find . -maxdepth 1 -type d -empty -exec rm {} \\;<|end_of_text|>')
('Task: /etc 폴더에서 최근 24시간 동안 수정된 모든 파일을 표시합니다.', 'find /etc -type f -mtime -1', 'find /etc -mtime -1<|end_of_text|>')
('Task: /usr/bin 디렉토리에 있는 파일들의 종류를 확인하세요.', 'find /usr/bin -type f -exec file {} \\;', 'find /usr/bin | xargs file<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 'FILE-TO-FIND'라는 이름을 가진 모든 파일과 디렉토리를 제거하세요.", 'find. -name "FILE-TO-FIND" -exec rm -rf {} \\;', 'find . -name "FILE-TO-FIND" -exec rm -rf {} \\;<|end_of_text|>')
('Task: 각 하위 디렉토리 이름을 나열하여 현재 작업 디렉토리를 구성합니다.', 'echo $(ls -d */ )', "pwd | cut -f 1- -d\\/ --output-delimiter=$'\\n'<|end_of_text|>")
('Task: 현재 폴더에서 1MB를 초과하는 모든 파일을 찾아 다른 폴더로 옮깁니다.', 'find. -size +1000k -exec mv {} /usr/local/bin \\;', 'find . -size +1M -exec mv {} files \\+<|end_of_text|>')
('Task: "/your/directory/to/fuel/"의 모든 파일의 소유자와 그룹을 "nginx"으로 재귀적으로 변경합니다.', 'chown nginx:nginx /your/directory/to/fuel/ -R', 'chown nginx:nginx /your/directory/to/fuel/ -R<|end_of_text|>')
('Task: 파일로 보내기 위해 Find 명령어의 출력 사용', 'find. -name *.mp3 -fprint filename', 'find / -name *.mp3 -fprint nameoffiletoprintto<|end_of_text|>')
('Task: 현재 작업 디렉토리 트리 아래에 있는 모든 파일을 나열합니다.', 'find `pwd` -exec ls -l {} \\;', 'find $(pwd)/ -type f<|end_of_text|>')
('Task: 현재 디렉토리 트리의 파일에서 "searched-string" 문자열을 검색합니다.', 'find. -exec grep "searched-string" {} \\; -print', 'find . | xargs grep "searched-string"<|end_of_text|>')
('Task: "$default_java_dir"에 대해 파일 이름이 "/usr/lib/jvm/default-java"인 심볼릭 링크를 강제로 생성하고 자세한 출력하기', 'sudo ln -sfv "$default_java_dir" /usr/lib/jvm/default-java', 'sudo ln -sTfv "$default_java_dir" "/usr/lib/jvm/default-java"<|end_of_text|>')
("Task: 'root' 그룹에 속한 현재 디렉토리 트리의 모든 파일의 그룹을 'temp'로 변경하세요.", 'find. -group root -exec chgrp temp {} \\;', 'find . -group root -print | xargs chgrp temp<|end_of_text|>')
('Task: /usr/ports/packages 디렉토리 트리에서 모든 깨진 심볼릭 링크를 제거하십시오.', 'find /usr/ports/packages -type l -print0 | xargs -0 rm -f', 'find -L /usr/ports/packages -type l -delete<|end_of_text|>')
('Task: 현재 폴더에서 모든 txt 파일을 찾되, ./misc 폴더는 제외하십시오.', "find. -name '*.txt'! -path './misc/*'", "find . -path ./misc -prune -o -name '*.txt' -print<|end_of_text|>")
('Task: 모든 디렉토리를 현재 폴더에서 나열합니다.', 'find. -type d', 'ls -d */<|end_of_text|>')
("Task: 현재 디렉토리 내에서 'searchName'을 포함하는 모든 파일을 검색한 후, 파일이 바로 그 디렉토리에 없으면 오류를 표시하라.", 'find. -name "searchName" -print0 | xargs -0 -d "\\n" /bin/bash -c \'echo $(ls -l "$0")\'', 'find ./ -name "*" -printf "%f\\n" | xargs grep "searchName"<|end_of_text|>')
('Task: 랜덤한 숫자를 2000에서 65000까지 출력합니다.', 'seq 2000 65000 | sort -R | head -n 1', 'seq 2000 65000 | sort -R | head -n 1<|end_of_text|>')
('Task: 하위 디렉토리를 검색하지 않고 현재 폴더의 모든 디렉토리 이름을 표시합니다.', 'find. -mindepth 1 -maxdepth 1 -type d', 'echo -e "line1\\r\\nline2" | od -a<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 'a(b*' 패턴에 일치하는 모든 파일을 찾습니다.", "find. -name 'a(b*'", "find . -name 'a(b*' -print<|end_of_text|>")
('Task: "filename"에서 347340107번째부터 347340206번째까지의 줄을 출력하세요.', 'tail -n +347340107 filename | head -n 100', 'tail -n +347340107 filename | head -n 100<|end_of_text|>')
('Task: 현재 폴더에 있는 모든 텍스트 파일 중 readme 파일을 제외하고 표시합니다.', 'find. -type f -name "*.txt"! -name README.txt', 'find . -type f -name "*.txt" ! -name README.txt -print<|end_of_text|>')
('Task: 2009년 2월, 3월, 4월의 달력을 나란히 출력합니다.', 'paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)', 'paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)<|end_of_text|>')
('Task: 모든 .txt 파일을 현재 디렉토리와 그 하위 디렉토리에서 찾습니다.', 'find. -name "*.txt"', "find . -name '*.txt' -print0<|end_of_text|>")
("Task: 현재 디렉토리 트리 아래의 모든 파일/디렉토리 목록을 'foo'라는 이름의 파일에 저장합니다.", 'find. | tee foo', 'find . -fprint foo<|end_of_text|>')
('Task: 홈 폴더에서 모든 코어 파일을 제거하십시오.', 'find ~ -name core -exec rm {} \\;', 'find /home -name core -exec rm {} \\;<|end_of_text|>')
("Task: 파일 시스템 전체에서 'ttt' 이후에 생성된 모든 파일/디렉토리나 'wn' 사용자가 소유한 모든 파일/디렉토리를 검색하라.", 'find / -newer ttt -or -user wnj', 'find / \\( -newer ttt -or -user wnj \\) -print<|end_of_text|>')
("Task: 이름에 'mystring'이 포함된 현재 디렉토리 아래의 *.txt 파일을 나열한다.", 'find. -name "*.txt" | grep mystring', 'find . -name *.txt | egrep mystring<|end_of_text|>')
('Task: 모든 *.mp3 파일을 현재 디렉토리에서 찾으세요.', 'find. -name *.mp3', 'find . -name *.mp3<|end_of_text|>')
('Task: 날짜 이후의 모든 파일을 재귀적으로 검색합니다.', 'find -newermt "Mar 03"', 'find . -type f -newermt "$(date \'+%Y-%m-%d %H:%M:%S\' -d @1494500000)"<|end_of_text|>')
('Task: 현재 디렉토리 아래에 다른 파일 시스템으로 내려가지 않고 각 경로의 끝에 null 문자를 추가한 파일을 찾으세요', 'find. -mount -depth -type d -print0', 'find -x . -type f -print0<|end_of_text|>')
('Task: 현재 디렉토리와 그 아래에 있는 모든 파일과 디렉토리를 나열합니다.', 'find -ls', 'find -print0 | xargs -0 ls<|end_of_text|>')
('Task: core라는 이름을 가진 파일을 /tmp 디렉토리와 그 하위에서 찾아 삭제하세요. 단, 파일 이름에 줄 바꿈, 공백, 단일 또는 이중 따옴표가 포함되면 제대로 작동하지 않을 수 있습니다.', 'find /tmp -name core -exec rm {} \\;', 'find /tmp -name core -type f -print | xargs /bin/rm -f<|end_of_text|>')
('Task: $root 디렉토리 트리에서 패턴 ".[a-z]*"와 일치하지 않는 모든 디렉토리를 콜론(:)으로 구분된 목록으로 출력하세요.', "find $root -type d -not -name '.[a-z]*' | tr '\\n' ':'", 'find "$root" -name ".[a-z]*" -prune -o -type d -printf \'%p:\'<|end_of_text|>')
('Task: 모든 *.txt 파일/디렉토리를 현재 디렉토리 아래에서 찾습니다.', 'find -name "*.txt"', "find -name '*.txt'<|end_of_text|>")
('Task: 현재 폴더의 모든 파일을 정규 표현식을 사용하여 검색하되, test 폴더에 있는 파일은 제외합니다.', 'find. -type f -regex ".*/my.*p.$"! -path "./test/*"', 'find . -name test -prune -o -regex ".*/my.*p.$"<|end_of_text|>')
("Task: '/home' 디렉토리 트리에서 어떤 사용자에게도 속하지 않는 모든 파일/디렉토리를 찾아라.", 'find /home -nouser -print', 'find /home -nouser -print<|end_of_text|>')
('Task: "$1/link"에 대한 절대 경로인 "$2"로 심볼릭 링크를 생성합니다.', 'ln -s "$(readlink -f $1/link)" $2', 'ln -s "$(readlink -e "$2")" "$1/link"<|end_of_text|>')
('Task: 현재 폴더 내의 모든 최상위 빈 폴더를 제거합니다.', 'find. -type d -empty -maxdepth 1 -exec rmdir {} \\;', 'ls | xargs rmdir<|end_of_text|>')
('Task: 현재 디렉토리 트리의 모든 파일의 이름과 유형을 출력하라.', 'find. -type f -exec echo {} \\;', 'find . -printf "%y %p\\n"<|end_of_text|>')
('Task: 모든 디렉토리를 현재 폴더에서 찾으세요.', 'find. -type d', 'find -type d<|end_of_text|>')
("Task: 'staff' 그룹을 가진 파일을 현재 디렉토리에서 찾아 심볼릭 링크 여부를 확인하여 표시하라.", 'find. -group staff -exec file {} \\; | grep -wE "regular file|symbolic link"', 'find `pwd` -group staff -exec find {} -type l -print ;<|end_of_text|>')
("Task: SRCFOLDER의 모든 내용을 'DESTFOLDER'로 복사하세요. DESTFOLDER가 이미 존재하면 복사된 내용은 그 안에 저장됩니다.", 'find SRCFOLDER -depth -print0 | cpio -pmd0 DESTFOLDER', 'cp -R SRCFOLDER DESTFOLDER/<|end_of_text|>')
('Task: /home/username/tmp 아래의 모든 디렉토리를 찾아 그들의 권한을 770으로 설정해라.', 'find /home/username/tmp -type d -exec chmod 770 {} +', 'find /home/username/tmp -type d -exec chmod 770 {} +<|end_of_text|>')
('Task: $somedir가 비어있으면 "$somedir is empty"를 출력합니다.', 'find "$somedir" -maxdepth 0 -empty -exec echo {} is empty \\;', 'find "$somedir" -maxdepth 0 -empty -exec echo {} is empty. \\;<|end_of_text|>')
("Task: 최근 365*24시간 동안 수정되지 않은 'home' 폴더 내의 모든 파일들을 표시합니다.", 'find $HOME -mtime +365', 'find $HOME -mtime +365<|end_of_text|>')
('Task: 모든 .txt 파일이 "needle"을 포함하는지 확인하라', 'find. -name "*.txt" -exec grep -l "needle" {} +', 'find . -type f -iname "*.txt" -print | xargs grep "needle"<|end_of_text|>')
('Task: 아카이브를 생성할 때 pbzip2 압축 프로그램을 사용하라.', 'tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 PATH_TO_ARCHIVE', 'tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 /DIR_TO_ZIP/<|end_of_text|>')
("Task: 전체 이름에 'directory'가 포함되지 않은 모든 javascript 파일을 나열합니다.", 'find. -type f -name "*.js"! -path "./directory/*"', "find . -name '*.js' -and -not -path directory<|end_of_text|>")
('Task: 2655341 inode 번호를 가진 물리 파일에 대한 모든 하드 링크를 삭제하라', 'find. -xdev -inum 2655341 -exec rm {} \\;', 'find /home -xdev -inum 2655341 | xargs rm<|end_of_text|>')
('Task: 입력을 받아 줄 번호와 함께 터미널에 출력합니다.', "nl -s' -->'file.txt", 'cat -n<|end_of_text|>')
('Task: 현재 디렉토리 트리의 모든 일반 파일들의 권한을 644로 변경하라', 'find. -type f -exec chmod 644 {} \\;', 'find . -type f -exec chmod 644 {} \\;<|end_of_text|>')
('Task: /home/peter 폴더의 모든 파일 중 사용자가 소유하지 않은 파일의 긴 목록을 표시하고, 이러한 모든 파일의 소유자와 그룹을 (사용자 확인 후) "peter","peter"로 변경합니다.', "find /home/peter -nouser peter -exec ls -lg {} \\; | sudo rename's/(^[^ ]* )[^ ]*/$1peter /'", 'find /home/peter -nouser -exec ls -l {} \\; -ok chown peter.peter {} \\;<|end_of_text|>')
('Task: Texinfo 소스 파일을 /usr/local/doc에서 찾습니다.', 'find /usr/local/doc -name \\*.texi -print', "find /usr/local/doc -name '*.texi'<|end_of_text|>")
("Task: 'FILENAME' 파일의 모든 대괄호로 둘러싸인 항목을 'var' 변수에 저장합니다.", 'var=$(cat "$FILENAME" | tr -d \'[\' | tr -d \']\' | tr \\  \\\\n)', "var=`egrep -o '\\[.*\\]' FILENAME | tr -d ][`<|end_of_text|>")
('Task: 현재 폴더의 모든 php 파일에서 단어를 검색하고 일치하는 줄을 표시하십시오.', "find. -name *.php -type f -exec grep -Hn '$test' {} \\;", "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\;<|end_of_text|>")
('Task: 대화형 쉘에서 표준 입력에서 한 줄을 읽고 "Do that? [Y,n]" 프롬프트와 "Y" 제안을 사용하여 "input" 변수에 저장', 'read -re -p "Do that? [Y,n]" -i Y input', 'read -e -p "Do that? [Y,n]" -i Y input<|end_of_text|>')
('Task: 디렉토리만 찾기', 'find -type d', 'find -type d<|end_of_text|>')
("Task: ${PROG} 변수의 표현식과 같은 형식으로 이름을 지정한 임시 파일을 생성하고, 'mytemp' 변수에 경로를 저장합니다.", 'mytemp=$(mktemp "${PROG}")', 'mytemp="$(mktemp -t "${PROG}")"<|end_of_text|>')
('Task: gzipped 파일 "bigfile.z"의 500번째 줄에서 500 + 501번째 줄까지 보기', 'zcat bigfile.z | head -n500 | tail -n3', 'zcat bigfile.z | tail -n +500 | head -501<|end_of_text|>')
('Task: 전체 파일 시스템에서 정확히 50일 전에 접근한 모든 파일을 찾아라', 'find / -atime 50', 'find / -atime 50<|end_of_text|>')
('Task: 루트 사용자 접근을 가져옵니다.', 'sudo su -', 'sudo su<|end_of_text|>')
('Task: /dir/path/look/up 디렉토리에서 이름이 dir-name-here인 파일들을 찾아라.', 'find /dir/path/look/up -name "dir-name-here"', 'find /dir/path/look/up -name "dir-name-here"<|end_of_text|>')
('Task: /path 디렉토리 트리에서 일반 파일을 검색합니다.', 'find /path -type f', 'find /path -type f<|end_of_text|>')
('Task: bzip2 명령어를 시스템에서 찾습니다.', 'which bzip2', 'which bzip2<|end_of_text|>')
("Task: 'EXPR' 파일을 제외하고 'path' 폴더의 모든 파일을 재귀적으로 삭제합니다.", 'find path -name "EXPR" -exec rm -rf {} \\;', "find [path] -type f -not -name 'EXPR' | xargs rm<|end_of_text|>")
("Task: 'public_html' 디렉토리 내 모든 항목의 그룹 소유권을 'website' 그룹으로 재귀적으로 변경합니다.", 'chgrp -R website public_html', 'chgrp --recursive website public_html<|end_of_text|>')
("Task: 이름이 '*sysdep.c'와 일치하는 심볼릭 링크 파일 찾기", "find. -lname '*sysdep.c'", "find . -lname '*sysdep.c'<|end_of_text|>")
('Task: 현재 디렉토리의 모든 파일과 디렉토리를 "somewhere/"로 이동하세요.', 'mv * somewhere/', 'mv `ls` somewhere/<|end_of_text|>')
('Task: 2009년 4월의 마지막 날짜를 출력하세요.', 'cal 4 2009 | tail -n 1', "cal 4 2009 | tr ' ' '\\n' | grep -v ^$ | tail -n 1<|end_of_text|>")
('Task: 현재 디렉토리의 각 파일과 디렉토리를 MB 단위의 파일 크기로 접두사를 붙여 가장 작은 것부터 가장 큰 것까지 정렬하여 나열합니다.', 'find. -type f -exec du -sh {} \\; | sort -n', 'du -smc * | sort -n<|end_of_text|>')
('Task: file1.csv와 file2.txt에서 첫 번째 필드가 공통인 각 줄에 대해, file1.csv의 첫 4개 필드를 출력하기 - 두 파일 모두 먼저 정렬해야 함', "comm -12 file2.txt <(sort file1.csv) | cut -d',' -f1-4 file1.csv", 'join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt<|end_of_text|>')
("Task: 포트 12345를 'localhost'에서 'otherHost'의 포트 12345로 전달하고, 사용자 'otherUser'로 설정합니다.", 'ssh -fNT -p 12345 otherUser@otherHost:12345 localhost:12345 &', 'ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost<|end_of_text|>')
('Task: OSX에서 "google.com"으로의 5번 핑의 평균 왕복 시간을 출력합니다.', "ping -c 5 -q google.com | grep -oP '\\d+(?=% packet loss)'", 'ping -c 5 google.com | grep "round-trip" | cut -f 5 -d "/"<|end_of_text|>')
('Task: 오늘 수정된 모든 텍스트 파일을 user/directory/에서 찾아 이 파일들의 마지막 줄을 표시합니다.', 'find user/directory/ -name "*.txt" -mtime 0 -exec tail -1 {} \\;', 'find /user/directory/ -name "*txt" -mtime 0 -type f -printf \'%p: \' -exec tail -1 {} \\;<|end_of_text|>')
('Task: /etc/sysconfig에서 최근 30분 동안 접근된 모든 일반 파일을 찾습니다.', 'find /etc/sysconfig -type f -amin -30', 'find /etc/sysconfig -amin -30 -type f<|end_of_text|>')
('Task: 모든 *.txt 파일/디렉토리를 홈 디렉토리 아래에서 찾습니다.', 'find ~ -name "*.txt"', 'find ~ -name "*.txt" -print<|end_of_text|>')
('Task: 현재 디렉토리에서 모든 사용자에게 읽기, 쓰기, 실행 권한이 부여된 일반 파일을 나열하고 권한을 표시해 주십시오', 'find. -type f -perm 777 -exec ls -l {} \\;', 'find . -type f  -perm 777 -exec ls -l {} \\;<|end_of_text|>')
('Task: /starting/directory 트리의 .css 파일에서 ".ExampleClass"를 검색하십시오', 'find /starting/directory -type f -name "*.css" -exec grep -H ".ExampleClass" {} \\;', "find /starting/directory -type f -name '*.css' | xargs -ti grep '\\.ExampleClass' {}<|end_of_text|>")
("Task: 'query_to_avoid'라는 이름을 제외한 모든 파일/디렉토리를 현재 디렉토리에서 찾아라.", 'find. -type f -not -name "query_to_avoid"', 'find -not -name "query_to_avoid"<|end_of_text|>')
('Task: /home 디렉토리에서 100MB보다 큰 모든 로그 파일을 찾아 삭제해라', 'find /home -size +100M -name "*.log" -exec rm -rf {} \\;', 'find /home -type f -name *.log -size +100M -exec rm -f {} \\;<|end_of_text|>')
("Task: 현재 디렉토리 트리 내 모든 파이썬 파일을 찾아 목록을 'output.txt'에 저장한 후, 이 파일들에서 'something'을 검색합니다.", 'find. -name "*.py" | tee output.txt | xargs grep "something"', "find . -name '*.py' | tee output.txt | xargs grep 'something'<|end_of_text|>")
('Task: 정확히 하루 전에 수정된 모든 파일을 찾아라.', 'find. -mtime 1', 'find -daystart -mtime 1<|end_of_text|>')
('Task: $GIT_DIR/../apresentacao/apresentacao.pdf와 $GIT_DIR/../capa/apresentacao.pdf 간에 하드 링크를 강제로 만들기', 'ln -f $GIT_DIR/../apresentacao/apresentacao.pdf $GIT_DIR/../capa/apresentacao.pdf', 'ln -f $GIT_DIR/../apresentacao/apresentacao.pdf $GIT_DIR/../capa/apresentacao.pdf<|end_of_text|>')
('Task: 최근 48시간 이내에 수정된 모든 일반 파일을 홈 폴더에서 찾아라.', 'find ~ -type f -mtime -2', 'find ~ -type f -mtime -2<|end_of_text|>')
("Task: 현재 디렉토리에서 '*.[ch]' 패턴의 파일 중 'thing' 문자열을 포함하는 파일 이름을 출력하세요.", "find. -name '*.[ch]' -print | xargs grep -l thing", "find . -name '*.[ch]' | xargs grep -l thing<|end_of_text|>")
('Task: src_dir을 재귀적으로 dest_dir로 복사하지만 기존 파일은 덮어쓰지 않습니다.', 'cp -R src_dir dest_dir', 'cp -nr src_dir dest_dir<|end_of_text|>')
('Task: 크기가 0 바이트인 홈 폴더의 모든 파일을 찾으세요.', 'find $HOME -type f -empty', 'find ~ -empty<|end_of_text|>')
('Task: 모든 cpp 파일을 현재 폴더에서 찾으세요.', 'find. -name "*.cpp"', 'find -name "*.cpp"<|end_of_text|>')
("Task: 'linux'라는 이름을 가진 모든 파일을 시스템에서 찾아라.", 'find / -name "linux"', 'find / -name linux<|end_of_text|>')
('Task: 사용자에게 스티키 비트가 설정된 모든 파일을 파일 시스템에서 찾아라', 'find / -perm /u+s', 'find / -perm -u+s<|end_of_text|>')
('Task: 테스트 디렉토리 아래에 있는 모든 빈 파일/디렉토리를 삭제하라', 'find test -depth -empty -delete', 'find test -depth -empty -delete<|end_of_text|>')
("Task: 현재 폴더에서 '*.pyc' 또는 '*.pyo'와 같은 모든 파일을 재귀적으로 제거하며, 확인 요청 없이 제거합니다.", 'find. -name "*.pyc" -exec rm -f {} \\;', 'find . -type f -name "*.py[c|o]" -exec rm -f {} +<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 이름이 't'로 시작하는 모든 .sh 파일을 삭제합니다.", 'find. -name t\\*.sh | xargs rm -f', 'find . -name "t*.sh" -exec rm -vf \'{}\' \\;<|end_of_text|>')
('Task: 크기가 0 바이트인 모든 빈 파일을 현재 디렉토리에서 찾습니다.', 'find. -type f -empty', 'find . -size 0<|end_of_text|>')
('Task: .git 폴더를 제외하고 현재 폴더에 있는 모든 디렉토리를 표시합니다.', "find. -type d -name '.git' -prune -o -print", "find . -iregex '.*/.git/.*' -prune -o -type d -name 'CVS'<|end_of_text|>")
('Task: 현재 폴더에서 최근 30일 동안 수정된 모든 html 또는 htm 파일의 링크를 생성하라.', 'find. -type f \\( -name "*.htm" -o -name "*.html" \\) -mtime -30 -printf "%h\\n" | sort -u', 'find \\( -name "*.htm" -o -name "*.html" \\) -a -ctime -30 -exec ln {} /var/www/obsolete \\;<|end_of_text|>')
("Task: '/data' 디렉토리 트리에서 권한이 400인 모든 일반 파일을 찾습니다.", 'find /data -type f -perm 400', 'find /data -type f -perm 400 -print<|end_of_text|>')
('Task: data.tar.gz"의 압축을 풀고 아카이브를 해제합니다.', 'gzip -d data.tar.gz | tar -xf -', 'gzip -dc data.tar.gz | tar -xvf -<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 "vmware-*.log"라는 이름의 모든 파일을 삭제하세요.', 'find. -name vmware-*.log -exec rm -f {} \\;', 'find . -name "vmware-*.log" -exec rm \'{}\' \\;<|end_of_text|>')
('Task: 파일을 1000줄 단위로 나누어 /usr/bin/firefox에 저장합니다.', 'split -l 1000 temp /usr/bin/firefox', 'split -n 1000 /usr/bin/firefox<|end_of_text|>')
('Task: /Applications 디렉토리 트리에서 *.app 디렉토리를 검색합니다.', "find /Applications -type d -name '*.app'", 'find /Applications -type d -name "*.app"<|end_of_text|>')
('Task: 최근 1시간 내에 변경된 모든 파일을 시스템에서 찾아라.', 'find / -cmin -60', 'find / -cmin -60<|end_of_text|>')
('Task: 현재 디렉토리 트리의 모든 파일에서 "SearchString"을 검색하되, *.html과 *.svn*을 제외합니다.', 'find. -name "*.html" -prune -o -name "*.svn*" -prune -o -type f -print | xargs grep "SearchString"', "find . ! -name '*.html' ! -name '*.svn*' -exec grep 'SearchString' {} /dev/null \\;<|end_of_text|>")
('Task: "echo Aa"의 출력의 바이트 단위 16진수 덤프를 출력합니다.', 'echo Aa | od -c', 'echo Aa | od -t x1<|end_of_text|>')
('Task: 현재 디렉토리와 그 아래에서 httpd.conf보다 새로운 모든 파일을 찾아라.', 'find. -newer httpd.conf', 'find . -newer httpd.conf<|end_of_text|>')
("Task: '.old' 확장자를 가진 현재 디렉토리 트리 아래의 모든 파일/디렉토리를 찾아라.", 'find. -name "*.old"', 'find . -name ”*.old” -print<|end_of_text|>')
('Task: myfile 파일의 그룹을 friends로 설정합니다.', 'chown :friends myfile', 'chown :friends myfile<|end_of_text|>')
("Task: '/usr/src' 디렉토리 트리 내에서 'fprintf.c'라는 이름의 모든 파일이나 디렉토리를 검색하라.", 'find /usr/src -name fprintf.c', 'find /usr/src -name fprintf.c<|end_of_text|>')
('Task: 현재 디렉토리 아래에 있는 "some-dir"라는 디렉토리를 x/로 이동하세요.', 'find. -name some-dir -type d -exec mv -t x {} +', 'find ./ -maxdepth 1 -name "some-dir" -type d -print0 | xargs -0r mv -t x/<|end_of_text|>')
('Task: /home/family/Music 디렉토리 아래에 있는 모든 *.m4a 파일/디렉토리를 찾으세요.', "find /home/family/Music -name '*.m4a'", 'find /home/family/Music -name *.m4a -print0<|end_of_text|>')
('Task: 48시간 이상 된 현재 디렉토리의 모든 *.txt 파일을 찾습니다.', 'find. -mtime +2 -name "*.txt"', "find . -maxdepth 1 -name '*.txt' -mtime +2<|end_of_text|>")
('Task: user" 폴더 내의 모든 파일 중 "/tmp/stamp$$" 파일 이후에 수정된 파일을 표시합니다.', 'find /home/user/ -newer /tmp/stamp$$', 'find /usr -newer /tmp/stamp$$<|end_of_text|>')
('Task: ".sh"로 끝나는 모든 파일에 실행 권한을 추가합니다.', 'chmod +x *.sh', 'chmod +x *.sh<|end_of_text|>')
('Task: 모든 777 권한의 디렉토리를 찾아 권한을 chmod 명령어로 755로 변경하세요.', 'find / -type d -perm 777 -print -exec chmod 755 {} \\;', 'find . -type d -perm 777 -print -exec chmod 755 {} \\;<|end_of_text|>')
('Task: 홈 디렉토리에서 모든 *.ogg 및 *.mp3 파일/디렉토리(대소문자 구분 없음)를 찾으세요.', "find $HOME -type f -iname '*.ogg' -o -iname '*.mp3'", "find $HOME -iname '*.ogg' -o -iname '*.mp3'<|end_of_text|>")
('Task: "root"에게 "$file"의 소유권을 상세하게 변경합니다.', 'sudo chown -v root "$file"', 'chown -v root "$file"<|end_of_text|>')
('Task: /home/mywebsite/public_html/sites/all/modules 디렉토리 아래에 있는 모든 파일을 찾아 그들의 권한을 640으로 변경하라', 'find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} \\;', 'find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} +<|end_of_text|>')
('Task: 표준 입력에서 문자를 나열하면서 표시할 수 없는 항목에 대해 백슬래시 이스케이프를 나타냅니다.', 'od -c', 'od -cvAnone -w1<|end_of_text|>')
('Task: dir 아래에 있는 모든 *~ 파일/디렉토리를 찾아 각각에 대한 rm 명령을 출력하여 삭제합니다.', "find dir -name '*~' -exec echo rm {} \\;", 'find dir -name \\*~ | xargs echo rm<|end_of_text|>')
('Task: 현재 작업 디렉토리 트리 내의 모든 XML 파일에서 "ERROR" 문자열을 찾습니다.', 'find. -name "*.xml" -exec grep "ERROR" {} \\;', 'find . -name "*.xml" -exec grep "ERROR" /dev/null \'{}\' \\+<|end_of_text|>')
('Task: 30일 이상 오래된 모든 파일을 찾아라.', 'find /tmp -mtime +30', 'find /tmp -mtime +30 -print<|end_of_text|>')
('Task: .html 확장자로 끝나는 파일을 찾아 /usr/local 디렉토리의 파일 경로를 출력하세요.', 'find /usr/local -name "*.html" -exec echo {} \\;', 'find /usr/local -name "*.html" -type f<|end_of_text|>')
("Task: '1.txt' 파일에서 도메인 이름을 가져와 각각에 대해 TXT DNS 레코드를 요청합니다.", 'cat 1.txt | xargs -I {} dig TXT {} +noabbrev', 'cat 1.txt | xargs dig TXT<|end_of_text|>')
('Task: $HOME 디렉토리 내에서 30일 이상 접근하지 않은 파일들을 모두 표시합니다.', 'find $HOME -atime +30', 'find $HOME -atime +30<|end_of_text|>')
('Task: tmp와 캐시 디렉토리를 제외하고 /path/to/dest 폴더 내의 모든 디렉토리를 표시합니다.', "find /path/to/dest -type d \\( -path '*/tmp' -or -path '*/cache' \\) -prune -false", 'find /path/to/dest -type d \\( ! -name tmp \\) -o \\( ! -name cache \\) -print<|end_of_text|>')
('Task: "file"에서 "$USER"와 일치하는 모든 줄을 찾아 출력 번호를 매겨라', 'nl -ba -nln file | grep -E "^\\.$USER"', 'grep  $USER file |nl<|end_of_text|>')
('Task: 현재 폴더에서 모든 php 파일을 찾습니다.', 'find. -name "*.php"', 'find . -name \\*.php<|end_of_text|>')
("Task: 'grep' 유틸리티의 재귀 관련 옵션을 찾습니다.", "grep --help | grep -a -e '^--recursive'", 'grep --help |grep recursive<|end_of_text|>')
('Task: USER 사용자로 ssh를 통해 HOST에 명시된 IP 주소나 호스트 이름에 연결한 후, 원격 파일 SRC를 변수 DEST로 정의된 로컬 경로로 복사하되, 진행 정보는 보이지 않게 하고 디버그 정보는 활성화하세요.', 'scp -q -v $SRC $DEST HOST', 'scp -qv $USER@$HOST:$SRC $DEST<|end_of_text|>')
("Task: 현재 디렉토리 아래의 모든 파일을 찾아 그 파일들에서 'something'을 검색하세요.", 'find. -type f -exec grep something {} \\;', 'find . -print | xargs grep something<|end_of_text|>')
('Task: 모든 html 파일 중 최근 7일 이내에 수정된 파일을 찾아라', 'find. -mtime -7 -name "*.html"', 'find . -mtime -7 -name "*.html"<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 'foo'라는 이름의 디렉토리를 제외하고 'foo'라는 이름을 가진 모든 파일을 찾아라.", "find. -name 'foo'! -type d", 'find . -name foo -type d -prune -o -name foo -print<|end_of_text|>')
("Task: 'myprog'의 그룹 소유자를 'groupb'로 변경합니다.", 'chgrp groupb myprog', 'chgrp groupb myprog<|end_of_text|>')
('Task: 현재 폴더에 있는 모든 최상위 파일과 폴더의 Kb 크기를 사람이 읽기 쉬운 형식으로 내림차순으로 출력하세요.', 'du -ks * | sort -n -r', 'du -ksh * | sort -n -r<|end_of_text|>')
('Task: "foobar"의 각 줄을 오른쪽 정렬로 9자리로 0으로 채워 번호를 매기세요.', 'seq 1 `wc -l <(echo "foobar")` | paste -d\'\'- - <(echo "foobar") | column -t', 'nl -nrz -w9 foobar<|end_of_text|>')
('Task: 모든 깨진 링크를 현재 폴더에서 찾아라', 'find -type f -links 0', 'find /target -type l -xtype l<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 이름에 'photo'를 포함하지 않는 모든 파일/디렉토리를 찾아라.", "find. -not -name '*photo*'", 'find . ! -name "*photo*"<|end_of_text|>')
('Task: core라는 이름의 파일을 /tmp 디렉토리에서 찾아 제거합니다.', 'find /tmp -name core -exec rm {} \\;', 'find /tmp -name core -type f -print | xargs /bin/rm -f<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 사용자가 소유하지 않은 모든 파일을 찾으세요.', 'find -nouser', 'find . -nouser<|end_of_text|>')
('Task: 최근 7일 이내에 수정된 디렉토리를 찾아라.', 'find. -type d -mtime -7', 'find . -mtime -7 -type d<|end_of_text|>')
("Task: 현재 디렉토리 아래에서 이름에 'mystring'이 포함된 *.txt 파일을 나열한다.", 'find. -name "*.txt" | grep mystring', 'find . -name *.txt | egrep mystring<|end_of_text|>')
('Task: 현재 디렉토리 트리의 모든 ".php" 파일의 줄 수를 세어라.', 'find. -name \\*.php -print0 | xargs -0 wc -l', "wc -l `tree -if --noreport | grep -e'\\.php$'`<|end_of_text|>")
('Task: $1이 첫 번째 명령 줄 인수인 경우, 접미사 ".keep.$1"으로 끝나는 이름의 모든 파일을 현재 디렉토리 트리에서 찾아 해당 접미사를 제거합니다.', 'find. -name "*.keep.$1" -print0 | xargs -0 rename "s/\\.keep\\.$1$//"', 'find . -type f -name "*.keep.$1" -print0 | xargs -0 rename "s/\\.keep\\.$1$//"<|end_of_text|>')
("Task: 현재 디렉토리에서 'foo'라는 이름을 가진, 확장자가 'bar'가 아닌 모든 디렉토리를 찾으세요.", 'find. -name "foo" -type d! -name "*.bar"', "find . -name '*foo*' ! -name '*.bar' -type d -print<|end_of_text|>")
('Task: 하위 디렉토리 목록을 현재 디렉토리에서 출력합니다.', 'find. -type d -maxdepth 1', "find . -maxdepth 1 -mindepth 1 -type d -printf '%f\\n'<|end_of_text|>")
('Task: RSA 형식의 ssh 키를 생성하며, 저장할 파일명을 요청하고, 기본값으로 $HOME/.ssh/id_rsa를 제안하라.', 'ssh-keygen -t rsa', 'ssh-keygen -t rsa<|end_of_text|>')
('Task: .bashrc"에 대한 심볼릭 링크를 ".bash_profile"이라는 이름으로 만들어라.', 'ln -s $HOME/.bashrc $HOME/.bash_profile', 'ln -s .bashrc .bash_profile<|end_of_text|>')
('Task: 현재 디렉토리의 파일을 세미콜론으로 구분된 값 목록으로 출력하라', 'find. -print0', "ls -1b | tr '\\n' ';'<|end_of_text|>")
('Task: /etc에서 root가 소유하고 최근 1분 내에 수정된 모든 파일을 표시합니다.', 'find /etc -user root -mmin -1', 'find /etc/ -user root -mtime 1<|end_of_text|>')
('Task: ssh 키를 만들어 ~/.ssh/apache-rsync 파일에 저장하세요.', 'ssh-keygen -f ~/.ssh/apache-rsync', 'ssh-keygen -f ~/.ssh/apache-rsync<|end_of_text|>')
('Task: 현재 스크립트의 전체 실제 경로의 디렉토리 이름을 출력하라', 'echo $(dirname $(readlink -f $0))', 'echo "dirname/readlink: $(dirname $(readlink -f $0))"<|end_of_text|>')
("Task: 'LGT_TEMP_FILE' 변수에 경로를 저장하고, '.cmd' 접미사가 추가된 임시 파일을 생성합니다.", 'LGT_TEMP_FILE=$(mktemp $(pwd)/LGT_XXXXXX.cmd)', 'LGT_TEMP_FILE="$(mktemp --suffix .cmd)"<|end_of_text|>')
('Task: 현재 디렉토리의 레벨 2 하위 디렉토리를 나열합니다.', 'find. -mindepth 2 -maxdepth 2 -type d -exec ls -d {} \\;', 'find . -mindepth 2 -maxdepth 2 -type d -ls<|end_of_text|>')
('Task: 표준 입력에서 모든 공백 문자를 탭으로 대체하십시오.', "tr '[:space:]' '\\t'", "tr '[:blank:]' \\\\t<|end_of_text|>")
("Task: './node_modules/*'와 './vendor/*' 경로를 제외한 모든 js 파일을 찾아라.", 'find. -name "*.js"! -path "./node_modules/*"! -path "./vendor/*"', "find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*'<|end_of_text|>")
("Task: '.env' 파일에 지정된 할당을 통해 환경 변수를 설정하고, 정의된 환경에서 'rails' 명령어를 실행하기", 'RAILS_ENV=localhost./script/rails', 'env $(cat .env | xargs) rails<|end_of_text|>')
('Task: 크기가 1000의 거듭제곱인 루트 파일 시스템의 디스크 공간 사용량과 총합을 출력하라', 'df -H --total /', 'df -H --total /<|end_of_text|>')
("Task: 파일 시스템 전체에서 사용자 'bluher'가 소유한 모든 정규 파일의 긴 목록을 표시합니다.", 'find / -type f -user bluher -exec ls -l {} \\;', 'find / -type f -user bluher -exec ls -ls {}  \\;<|end_of_text|>')
("Task: 파일 시스템에서 '.mp3'로 끝나는 디렉토리를 모두 찾아 /mnt/mp3 폴더로 이동하세요.", 'find / -type d -name *.mp3 -print0 | xargs -0 mv {} /mnt/mp3', 'find / -iname "*.mp3" -type d -exec /bin/mv {} /mnt/mp3 \\;<|end_of_text|>')
('Task: "/zu/durchsuchender/Ordner" 디렉토리 트리의 파일 중 이름이 "beispieldatei"로 시작하고 "Beispielinhalt" 문자열을 포함하는 파일 목록을 출력합니다.', 'find /zu/durchsuchender/Ordner -name "beispieldatei*" -exec grep -l "Beispielinhalt" {} \\;', 'find "/zu/durchsuchender/Ordner" -name "beispieldatei*" -print0 | xargs -0 grep -l "Beispielinhalt"<|end_of_text|>')
('Task: 모든 파일을 현재 폴더에서 표시합니다.', 'find. -print', 'find .<|end_of_text|>')
('Task: 정규 표현식을 사용하여 현재 폴더에서 파일을 검색합니다.', "find. -regex '.*[0-9]+$'", "find ./ -regex '.*\\..*'<|end_of_text|>")
('Task: 대소문자를 구분하지 않고 "WSFY321.c"라는 이름의 파일을 검색합니다.', 'find. -iname "WSFY321.c"', 'find . -iname "WSFY321.c"<|end_of_text|>')
('Task: 필요에 따라 "tmp/real_dir1"과 "tmp/real_dir2" 디렉토리를 생성합니다.', 'mkdir -p tmp/real_dir1 tmp/real_dir2', 'mkdir -p tmp/real_dir1 tmp/real_dir2<|end_of_text|>')
('Task: /usr/ports/packages에서 모든 깨진 심볼릭 링크를 제거하십시오.', 'find /usr/ports/packages -type l -exec rm -f {} \\;', 'find -L /usr/ports/packages -type l -delete<|end_of_text|>')
('Task: 사용자에게 읽기 권한이 있는 모든 파일을 파일 시스템에서 찾아 상위 10개를 표시하라', 'find / -perm -u=r | head', 'find / -perm /u=r | head<|end_of_text|>')
('Task: 발견한 파일들에 대해 ls 명령어를 수행합니다.', 'find -exec ls -ld {} \\;', 'find . -name "*.pl" -exec ls -ld {} \\;<|end_of_text|>')
('Task: 파일 시스템을 한 번만 순회하면서 setuid 파일과 디렉토리를 /root/suid.txt에, 큰 파일을 /root/big.txt에 나열합니다.', "find / \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %g\\n' \\), \\( -size +100M -fprintf /root/big.txt 'actal-large-file' \\)", "find /       \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\( -size +100M -fprintf /root/big.txt  '%-10s %p\\n' \\)<|end_of_text|>")
('Task: apache" 사용자가 가진 모든 크론 작업을 나열합니다.', 'crontab -l -u apache', 'crontab -u apache -l<|end_of_text|>')
('Task: 현재 디렉토리에서 이름이 변수 $a와 일치하는 패턴을 가진 파일 또는 디렉토리를 찾습니다.', 'find. -name $a', 'find . -maxdepth 1 -name "$a" -print -quit<|end_of_text|>')
('Task: 히스토리에 $line 줄을 저장합니다.', 'history -s "$line"', 'history -s "$line"<|end_of_text|>')
("Task: 현재 디렉토리 내에서 재귀적으로 모든 'string to be searched'라는 이름의 파일 중 'text'라는 텍스트가 포함된 문자열 찾기", 'find. -name "string to be searched" -print0 | xargs -0 grep "text"', 'find . -name "string to be searched" -exec grep "text" "{}" \\;<|end_of_text|>')
('Task: 특정 비디오 파일의 경로를 현재 디렉토리에서 찾습니다.', "find. -name 'filename.extension' -exec echo {} \\;", 'find ./ -name "foo.mp4" -printf "%h\\n"<|end_of_text|>')
('Task: /mnt/naspath 디렉토리 아래에 있는 모든 파일을 찾아라. 단, .snapshot 디렉토리로 내려가지 않고, 지난 24시간 동안 수정된 파일을 찾아라. 구분자로 널 문자를 사용하라', 'find /mnt/naspath \\! \\(-newermt yesterday\\) -print0', 'find /mnt/naspath -name .snapshot -prune -o \\( -type f -mtime 0 -print0 \\)<|end_of_text|>')
('Task: 빈 환경을 나열합니다(아무 것도 출력하지 않음).', 'env -i', 'env -i<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 읽기 권한이 없는 일반 파일을 찾아보세요.', 'find. -type f! -perm -444', 'find -type f ! -perm -444<|end_of_text|>')
('Task: /etc/cron.minute 디렉토리를 생성하라.', 'mkdir /etc/cron.minute', 'mkdir /etc/cron.minute<|end_of_text|>')
('Task: 현재 폴더에서 10KB보다 큰 모든 파일의 목록을 표시합니다.', 'find. -size +10k -print', 'find . -size +10k -ls<|end_of_text|>')
("Task: 지정된 경로에서 마지막 슬래시로 나뉜 구성 요소를 출력하세요. 이 경우 'data_report_PD_import_script_ABF1_6'입니다.", "echo 'data_report_PD_import_script_ABF1_6'| rev | cut -d'_' -f 1 | rev", 'basename /EBF/DirectiveFiles/data_report_PD_import_script_ABF1_6<|end_of_text|>')
('Task: 모든 *shp* 디렉토리를 현재 디렉토리에서 찾아서, 그 안에 있는 모든 정규 파일을 ../shp_all/로 옮깁니다.', 'find. -type d -name "*shp*" -exec find {} -type f \\; -exec mv {}../shp_all/ \\;', 'mv $(find $(find . -name "*shp*" -printf "%h\\n" | uniq) -type f) ../shp_all/<|end_of_text|>')
("Task: 현재 디렉토리 트리 내에서 'text.txt'라는 이름의 모든 파일을 찾아 그 내용을 보여줘.", 'find. -name "text.txt" -print0 | xargs -0 cat', "find . -name 'text.txt' -print -exec cat {} \\;<|end_of_text|>")
('Task: 최근 24시간 이내에 수정된 모든 파일을 홈 폴더에서 찾아라.', 'find $HOME -mtime -1', 'find $HOME -mtime -1<|end_of_text|>')
('Task: 현재 디렉토리 트리의 일반 파일 목록에 있는 문자의 수를 세어라.', "find. -type f | xargs cat | tr -c -d '\\n' | wc -l", 'find . -type f | xargs | wc -c<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 이름이 "1"로 끝나는 모든 파일에서 "1" 문자열을 검색합니다.', 'find. -name "*1" -exec grep "1" {} \\;', 'find . -name "*1" -print0 |xargs -0 grep "1"<|end_of_text|>')
('Task: file.txt"의 각 줄을 80자로 조정합니다.', 'fold -w 80 file.txt', 'cat file.txt | fold<|end_of_text|>')
('Task: "repos1/"과 "repos2/"의 각 파일을 비교하고, 없는 파일을 빈 파일로 취급하고, 공백과 탭 확장의 차이를 무시하며, 통합 컨텍스트의 3줄을 출력하십시오.', 'diff -Naur repos1/ repos2/', 'diff -ENwbur repos1/ repos2/<|end_of_text|>')
('Task: 마지막 접근 시간이 10일을 초과하고 크기가 0 바이트인 모든 임시 파일을 강제로 삭제하기', 'find /tmp -type f -atime +10 -size 0 -exec rm -f {} \\;', 'find /tmp -size 0 -atime +10 -exec rm -f {} \\;<|end_of_text|>')
('Task: 시스템의 짧은 호스트 이름을 "hostname" 변수에 저장합니다.', 'hostname=$(hostname -s)', 'hostname=`hostname -s`<|end_of_text|>')
("Task: 이름에 '99966'이 포함된 모든 디렉토리를 YOUR_STARTING_DIRECTORY에서 시작하여 찾아라.", "find YOUR_STARTING_DIRECTORY -type d -iname '*99966*'", 'find YOUR_STARTING_DIRECTORY -type d -name "*99966*" -print<|end_of_text|>')
('Task: "caniwrite"를 "/usr/local/bin"으로 이동하되, 덮어쓰지 않습니다.', 'mv caniwrite /usr/local/bin', 'mv -nv caniwrite /usr/local/bin<|end_of_text|>')
('Task: 100MB보다 큰 모든 파일/디렉토리를 찾아 그들의 크기와 함께 /root/big.txt 파일에 목록을 출력합니다.', 'find / -size +100M -print | xargs wc -c > /root/big.txt', "find \\( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)<|end_of_text|>")
('Task: "file"의 두 줄을 공백으로 구분된 단일 줄로 출력하라', "head -2 file | tail -1 | tr '\\n'''", "cat file | paste -d' ' - -<|end_of_text|>")
('Task: 주어진 월의 일수 내에 데이터가 수정된 파일을 찾으세요', 'find -type f -daystart -mtime -0 -mtime +0', 'find ./ -daystart -mtime -10 -and -mtime +1<|end_of_text|>')
('Task: CVS 디렉토리를 제외하고 /usr/src 디렉토리에서 최소 일곱 단계의 중첩이 있는 파일/디렉토리를 찾으십시오.', 'find /usr/src -name CVS -prune -o -depth +6 -print', 'find /usr/src -name CVS -prune -o -depth +6 -print<|end_of_text|>')
('Task: $1 디렉토리에서 재귀적으로 패턴 $2와 일치하는 파일을 찾아서 텍스트 $3를 검색하세요. 여기서 $1, $2, $3는 Bash 스크립트에 대한 명령 줄 인수입니다.', 'find $1 -name "$2" -print0 | xargs -0 grep -Hn "$3"', 'find $1 -path /proc -prune -o -name "$2" -print -exec grep -Hn "$3" {} \\;<|end_of_text|>')
('Task: "hello world"를 콘솔에 작성하고 제공된 입력의 바이트, 심볼, 문자열 수를 출력합니다.', 'wc -c <<< "hello world"', 'echo "hello world" | tee >(wc)<|end_of_text|>')
('Task: oracle" 실행 파일이 위치한 디렉토리로 이동합니다.', 'cd `dirname $(which oracle)`', 'cd "$(dirname $(which oracle))"<|end_of_text|>')
("Task: /root 디렉토리에서 'work' 디렉토리를 제외하고 'myfile'이라는 이름을 가진 일반 파일을 재귀적으로 검색합니다.", "find /root/ -path '/root/work' -prune -o -name myfile -type f -print", "find /root/ -name 'work' -prune -o -name myfile -type f -print<|end_of_text|>")
('Task: 권한이 4000인 root가 소유한 모든 일반 파일을 나열합니다.', 'find / -type f -user root -perm -4000 -exec ls -l {} \\;', 'find / -type f -user root -perm -4000 -exec ls -l {} \\;<|end_of_text|>')
('Task: *.jar 파일을 /usr, /home, /tmp에서 찾아보세요', 'find /usr /home /tmp -name *.jar', 'find /usr /home  /tmp -name "*.jar"<|end_of_text|>')
('Task: ONBOOT=\\"YES\\"\\nIPADDR=10.42.84.168\\nPREFIX=24"라는 여러 줄의 텍스트를 터미널에 출력하고, \'\\n\'을 줄 바꿈 문자로 대체한 뒤, 해당 텍스트를 루트 사용자 권한으로 /etc/sysconfig/network-scripts/ifcfg-eth4 파일에 추가합니다.', 'echo -e "ONBOOT=\\"YES\\"\\nIPADDR=10.42.84.168\\nPREFIX=24" | tee -a /etc/sysconfig/network-scripts/ifcfg-eth4', 'echo -e "ONBOOT=\\"YES\\"\\nIPADDR=10.42.84.168\\nPREFIX=24" | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth4<|end_of_text|>')
('Task: 가장 큰 파일 10개를 현재 디렉토리와 하위 디렉토리에서 찾습니다.', 'find. -type f -exec du -Sh {} + | sort -rh | head -n 10', 'du -hsx * | sort -rh | head -10<|end_of_text|>')
('Task: 최근 500일 동안 접근된 모든 일반 파일의 목록을 숨겨진 파일을 제외하고 표시합니다.', "find / -type f -atime +365 -oatime +365 | grep -v '/[^/]*\\$'", 'find . -type f -not -name ‘.*’ -mtime +500 -exec ls {} \\;<|end_of_text|>')
("Task: 파일 디스크립터 4로부터 한 줄을 읽어 'line' 변수에 저장합니다.", 'read line </dev/fd/4', 'read -u 4 line<|end_of_text|>')
('Task: 현재 디렉토리에서 모든 PHP 파일을 재귀적으로 찾아 "$test" 문자열을 검색합니다. 동시에 8개의 프로세스를 사용합니다.', "find. -name '*.php' -type f -print0 | xargs -0 -n1 -P8 grep -Hn '$test'", "find . -name \\*.php -type f -print0 | xargs -0 -n1 -P8 grep -Hn '$test'<|end_of_text|>")
('Task: /dir 디렉토리 아래에 있는 모든 filename* 파일을 삭제하라', 'find /dir -type f -name "filename*" -exec rm -f {} \\;', 'find /dir -name "filename*" -type f -exec rm {} \\;<|end_of_text|>')
('Task: 홈 디렉토리에 temp 디렉토리를 생성하라.', 'mkdir ~/temp', 'mkdir ~/temp<|end_of_text|>')
('Task: /etc/passwd"의 각 줄에 0으로 채운 9자리 번호를 오른쪽 정렬로 매기세요.', 'seq $(wc -l /etc/passwd | cut -f 1 -d " ") | nl /etc/passwd', 'nl -nrz -w9  /etc/passwd<|end_of_text|>')
('Task: $HOME 디렉토리에서 30일 이상 접근되지 않은 모든 파일을 표시합니다.', 'find $HOME -atime +30', 'find $HOME -atime +30<|end_of_text|>')
('Task: file"에서 줄을 첫 번째 필드를 기준으로 정렬한 후, ","로 구분된 유일한 줄만 남겨 둬.', 'cat file | sort -t, -k1,1 | uniq', 'sort -u -t, -k1,1 file<|end_of_text|>')
('Task: /proc과 그 하위의 모든 파일 이름을 출력합니다.', 'find /proc -print0', 'find /proc | xargs<|end_of_text|>')
('Task: 현재 폴더에서 오늘 수정되지 않고 파일 이름의 길이가 1인 모든 파일을 찾아라', 'find. -type f -name \\?.? -daystart -mtime 0 -print0', 'find . -name \\? -mtime +0<|end_of_text|>')
('Task: 마지막 10분 동안 변경된 모든 일반 파일을 /var/www 및 그 하위에서 나열합니다.', 'find /var/www -type f -cmin -10', 'find /var/www -cmin -10 -type f -printf "%c %pn"<|end_of_text|>')
('Task: $root 아래에 있는 모든 디렉토리를 찾아서 출력된 줄바꿈을 : (콜론)으로 변경하라.', "find $root -type d | tr '\\n' ':'", "find $root -type d | tr '\\n' ':'<|end_of_text|>")
('Task: 마지막 45분 동안 수정된 모든 파일을 .home/calvin 폴더에서 찾아라', 'find ~/ -mmin -45', 'find /home/calvin/ -mmin -45<|end_of_text|>')
("Task: 현재 디렉토리에서 'ini'로 끝나는 파일을 모두 나열합니다.", 'find. -type f -name "*.ini" -exec ls {} \\;', "find . -type f -name '*.ini'<|end_of_text|>")
("Task: 'echo 'hello, world'를 출력합니다.", 'echo \'echo "hello, world"\'', "echo 'hello, world' | cat<|end_of_text|>")
('Task: 모든 *.swp 파일을 현재 디렉토리에서 삭제합니다.', 'find. -name "*.swp" -exec rm -f {} \\;', 'find . -name "*.swp"|xargs rm<|end_of_text|>')
('Task: git 사용자 접근을 가져옵니다.', 'finger -l username | grep "Last Login"', 'su git<|end_of_text|>')
('Task: 최근 3일 동안 접근되지 않은 현재 디렉토리의 로그 파일들을 zip으로 만들어라(-p는 4 cpu 기계에 대한 병렬 처리를 위한 것이고, -n은 최대 작업 단위를 위한 것이다).', 'find. -name "*.log" -type f -atime +3 -print0 | xargs -P 4 -n 1000 zip -r', "find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -P 4 bzip2<|end_of_text|>")
('Task: 현재 디렉토리의 파일과 디렉토리 목록을 출력하며, "."도 포함합니다.', 'find.', 'find . \\( -name . -o -prune \\)<|end_of_text|>')
('Task: 현재 폴더에서 foo.txt 파일을 모두 검색하고 다른 위치로 이동합니다.', "find. -name foo.txt -print0 | xargs -0 -I'{}' mv '{}'../foo", 'find . -name foo.txt -print0 | xargs -0  -I{} mv {} /some/new/location/{}<|end_of_text|>')
('Task: 파일 시스템에서 모든 일반 mp3 파일을 찾아 /mnt/mp3 폴더로 이동하십시오.', 'find / -iname "*.mp3" -type f -print0 | xargs -0 -n 1 mv -t /mnt/mp3 {}', 'find / -iname "*.mp3" -type f | xargs -I \'{}\' mv {} /mnt/mp3<|end_of_text|>')
("Task: 현재 디렉토리 내의 모든 *.c 파일에서 'class foo' 문자열을 재귀적으로 검색합니다.", 'find. -name "*.c" -exec grep "class foo" {} \\;', 'grep "class foo" **/*.c<|end_of_text|>')
('Task: 최근 30분 이내에 수정된 모든 파일을 루트 디렉토리부터 재귀적으로 찾아 나열하라.', 'find / -mmin -30 -print', 'find / -mmin -30 -ls<|end_of_text|>')
('Task: 일반 파일 중에서 권한이 111보다 작은 것을 찾습니다.', 'find / -type f -perm 111 -print | egrep -v 111', 'find -perm -111 -type f<|end_of_text|>')
('Task: data/ 디렉토리 내의 filepattern-*2009* 파일 및 디렉토리를 모두 2009.tar로 아카이브합니다.', "find data/ -name 'filepattern-*2009*' | xargs tar uf 2009.tar", 'find data/ -name filepattern-*2009* -print0 | xargs -0 tar uf 2009.tar<|end_of_text|>')
('Task: 현재 디렉토리 아래에 있는 모든 *.txt 파일을 찾아 그들의 타임스탬프와 경로를 출력하고, 정렬한 후 마지막 항목만 출력합니다.', 'find. -name "*.txt" -printf "%T@ %p\\n" | sort -n | tail -1', 'find . -name "*.txt" -printf "%T+ %p\\n" | sort | tail -1<|end_of_text|>')
('Task: /mountpoint 아래의 파일들 중에서 하드 링크가 있는 파일을 찾아라', 'find /mountpoint -type f -links +1', 'find /mountpoint -type f -links +1<|end_of_text|>')
('Task: "file.tar.gz"을 크기가 1024 MB인 "file.tar.gz.part-"라는 접두사가 붙은 파일들로 분할합니다.', 'split -b 1024m file.tar.gz.part-', 'split -b 1024m "file.tar.gz" "file.tar.gz.part-"<|end_of_text|>')
('Task: file1.csv와 file2.txt에서 첫 번째 필드가 공통인 각 줄에 대해, file1.csv의 첫 4개 필드를 출력하기', 'join -t, -o 1.1,1.2,1.3,1.4 -a 1 file2.txt file1.csv', 'join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)<|end_of_text|>')
("Task: 현재 디렉토리 아래에 있는 모든 파일에서 'searches-txt' 파일에 쉼표로 구분된 패턴 목록과 일치하는 문자열을 재귀적으로 검색합니다.", 'grep -f searches.txt -ir', 'cat searches.txt| xargs -I {} -d, -n 1 grep  -r {}<|end_of_text|>')
("Task: 백슬래시 이스케이프를 무시한 채로 표준 입력을 조용히 읽고, 이스케이프 키가 눌릴 때까지 대기하며, 프롬프트로 $'Press escape to continue...\\n'을 사용.", "read -r -p $'Press escape to continue...\\n'", "read -rsp $'Press escape to continue...\\n' -d $'\\e'<|end_of_text|>")
('Task: 현재 디렉터리에 있는 모든 일반 파일을 나열합니다.', 'find. -type f', 'find . -type f -print0<|end_of_text|>')
('Task: "/path/to/someDirectory" 폴더의 모든 일반 파일들의 권한을 644로 변경하라', 'find /path/to/someDirectory -type f -print0 | xargs -0 chmod 644', 'sudo find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644<|end_of_text|>')
('Task: inode 번호를 사용하여 인쇄할 수 없는 디렉토리를 찾아 이름을 바꿉니다.', 'find. -type d -inum 266346 -exec mv -v {} /path/to/new/location \\;', 'find . -inum 211028 -exec mv {} newname.dir \\;<|end_of_text|>')
("Task: 'a(b*' 패턴과 일치하는 모든 파일을 현재 디렉토리 트리에서 찾습니다.", "find. -regex 'a(b*'", "find . -name 'a(b*' -print<|end_of_text|>")
('Task: 현재 디렉토리 내에서 모든 *FooBar* 파일과 디렉토리를 찾아서 ~/foo/bar에 복사합니다.', "find. -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar", "find . -name '*FooBar*' -exec cp -t ~/foobar -- {} +<|end_of_text|>")
('Task: 이름에 "sitesearch"가 포함되어 있고 경로 이름에 "demo"가 포함된 파일을 검색합니다.', 'find -iname "*sitesearch*" | grep demo', "find . -iname '*sitesearch*' | grep demo<|end_of_text|>")
('Task: 현재 디렉토리 아래에서 알파벳 순으로 가장 마지막 경로로 디렉토리를 변경합니다.', 'cd `ls -1rt | tail -1`', 'cd "$(find . -print0 | sort -z | tr \'\\0\' \'\\n\' | tail -1)"<|end_of_text|>')
('Task: /home/calvin 폴더에서 모든 텍스트 파일을 찾되, 2 레벨 이상 검색하지 않습니다.', 'find /home/calvin -maxdepth 2 -name "*.txt"', 'find /home/calvin/ -maxdepth 2  -name “*.txt”<|end_of_text|>')
('Task: 현재 폴더 내의 모든 html 파일을 표시하되, "./foo" 경로에서의 검색은 제외합니다.', 'find. -path \'./foo\' -prune -o -name "*.html" -print', 'find . -path "./foo" -prune -o -type f -name "*.html"<|end_of_text|>')
('Task: 모든 *.txt 파일/디렉토리를 현재 디렉토리 아래에서 찾습니다.', 'find. -name "*.txt"', 'find . -name *.txt -print<|end_of_text|>')
('Task: 파일의 이름, 소유자, 크기(바이트 단위)를 표시하는 표를 나타냅니다.', 'find. -type f -printf "%f %s %u\\n"', 'du -sh *<|end_of_text|>')
('Task: 현재 디렉토리의 이름을 전체 경로 없이 가져옵니다. 즉, 마지막 / 이후의 부분을 추출합니다.', 'basename $(pwd)', 'basename "$(pwd)"<|end_of_text|>')
("Task: 현재 디렉토리에서 파일 이름이 '*.c' 또는 '*.sh'로 끝나는 일반 파일을 나열합니다.", 'find. -type f \\( -name "*.c" -o -name "*.sh" \\)', 'find . -type f \\( -name "*.c" -o -name "*.sh" \\)<|end_of_text|>')
('Task: /home/"에 있는 모든 파일과 디렉토리를 디렉토리 구조와 수정 시간을 유지하여 "/newhome"으로 복사합니다.', 'find /home/ -maxdepth 1 -print0 | cpio -pdum0 /newhome', 'find /home/ -maxdepth 1 -print | sudo cpio -pamVd /newhome<|end_of_text|>')
("Task: 이름이 'test'로 시작하고 두 자리 숫자를 따르며 '.txt' 확장자로 끝나는 현재 디렉토리 트리 아래의 모든 파일/디렉토리를 찾아라.", 'find. -name "test.XX.txt"', 'find . -regextype sed -regex "./test[0-9]\\{2\\}.txt"<|end_of_text|>')
("Task: 'data.csv'의 각 줄에서 마지막 5개의 쉼표로 구분된 필드만 남기고 나머지를 모두 제거하십시오.", "tail -n +2 data.csv | grep -v '^.$' | tr -d ',' | cut -c 2- | tr ',' '\\n'", 'cat data.csv | rev | cut -d, -f-5 | rev<|end_of_text|>')
('Task: GZIP 변수를 "gzip" 명령어의 절대 경로로 설정합니다.', 'GZIP=`which gzip`', 'GZIP="$(which gzip)"<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 패턴 "*sub*"에 일치하는 파일을 찾아보세요.', 'find. -name "*sub*"', 'find ./ -name "*sub*"<|end_of_text|>')
('Task: $d 디렉토리 트리 아래의 디렉토리에 대한 권한을 ug=rwx, o=로 설정합니다.', 'find "$d/" -type d -exec chmod ug=rwx,o= \'{}\' \\;', "find $d -type d -exec chmod ug=rwx,o= '{}' \\;<|end_of_text|>")
('Task: 현재 디렉토리 내 모든 파일을 찾아 파일 이름을 공백으로 나누어 출력합니다.', 'find. -type f -print0 | xargs -0 -n 1 echo', 'find . | paste -sd " "<|end_of_text|>')
('Task: 현재 폴더에서 "config" 디렉토리를 검색합니다.', 'find. -type d -name config', 'find . -name config -type d<|end_of_text|>')
('Task: 현재 폴더 내의 모든 정규 파일 중 10KB보다 작은 파일들을 표시합니다.', 'find. -type f -size -10k', 'find . -type f -size -10k<|end_of_text|>')
('Task: 표준 입력에서 한 줄을 읽기', 'read', 'read<|end_of_text|>')
('Task: 찾은 파일에 대해 ls 명령어를 실행합니다.', 'find -name foo | xargs ls', 'find . -name "*.pl" -exec ls -ld {} \\;<|end_of_text|>')
("Task: 'filename' 파일을 무작위 콘텐츠로 35번 덮어 쓴 후, 0으로 덮어 쓰고 잘라내고 삭제하세요.", 'head -c 1000 /dev/urandom | LC_ALL=C grep -o \'.\\{3\\}\' | tail -c 35 | xargs touch filename; yes 0 | head -c 1024 | tr \'\\n\' \'\\0\' | xargs -0 /dev/nul >> filename; rm -f \\[0-9A-Za-z\\]\\{35\\}.tmp; zsh <<< "sort -n filename | head -1 | grep -o \'[0-9]\\{1,3}\\\')"', 'shred -uzn 35 filename<|end_of_text|>')
('Task: 발견된 모든 *.gif 파일을 현재 디렉토리 트리에서 나열한다.', 'find. -name *.gif -exec ls {} \\;', 'find . -name *.gif -exec ls {} \\;<|end_of_text|>')
('Task: 현재 디렉토리의 파일을 쉼표로 구분된 값 목록으로 출력하라', 'find. -maxdepth 1 -type f -print0 | xargs -0 echo file,', "ls -1 | tr '\\n' ','<|end_of_text|>")
('Task: 모든 파일의 권한을 0644로 현재 디렉토리 아래에서 변경하라', 'find. -type f -exec chmod 0644 {} \\;', 'find . -type f -exec chmod 0644 {} \\;<|end_of_text|>')
('Task: "text"의 내용을 표시합니다.', 'cat text', 'cat text<|end_of_text|>')
("Task: 표준 입력에서 한 줄을 읽어 들인 후, 'Please Enter a Message: '라는 프롬프트와 함께 새 줄 뒤에 'message' 변수에 저장", 'read -r -p "Please Enter a Message: \\n" message', 'read -p "`echo -e \'Please Enter a Message: \\n\\b\'`" message<|end_of_text|>')
("Task: 현재 디렉토리 내에서 'Desktop'이라는 이름을 가진 모든 파일이나 디렉토리를 찾아라.", 'find. -name Desktop', 'find ./ -name Desktop<|end_of_text|>')
('Task: 기본 날짜/시간 형식으로 epoch를 나타냅니다.', 'date -d @1284100161', 'date -ud@0<|end_of_text|>')
("Task: 현재 디렉토리 트리의 3단계에서 경로 이름에 'New Parts'가 포함된 디렉토리를 찾아 /cygdrive/c/Views에 심볼릭 링크를 만들어라.", 'find -mindepth 3 -maxdepth 3 -type d | grep "New Parts" | xargs -I {} ln -s "/cygdrive/c/Views" "{}"', 'find -mindepth 3 -maxdepth 3 -type d | grep "New Parts" | tr \'\\012\' \'\\000\' | xargs -0 ln -s -t /cygdrive/c/Views<|end_of_text|>')
('Task: "/local/path/some_file"을 "server.com" 호스트의 "/some/path"로 아카이브하고 "usr" 사용자로 인증하며, 전송 중에 데이터를 압축하고 진행 상황을 보여줍니다.', 'rsync -avz --progress /local/path/some_file usr@server.com:/some/path', 'rsync -avz --progress local/path/some_file usr@server.com:"/some/path/"<|end_of_text|>')
('Task: /var/www 디렉토리 내 모든 일반 파일의 권한을 755로 변경하기', 'find /var/www -type f -print0 | xargs -0 chmod 644', 'find /var/www -type f -print0 | xargs -0 chmod 644<|end_of_text|>')
('Task: 전체 파일 시스템에서 foo.bar 파일을 찾아 루트와 같은 파티션에 있는 것을 찾습니다.', 'find / -xdev -name foo.bar', 'find / -name foo.bar -print -xdev<|end_of_text|>')
('Task: 현재 디렉토리에서 패턴 *[+{;"\\\\=?~()<>&*|$ ]*에 일치하는 모든 파일을 제거하십시오.', 'find. -name \'*[+{;"\\\\=?~()<>&*|$ ]*\' -exec rm -f \'{}\' \\;', 'find . -name \'*[+{;"\\\\=?~()<>&*|$ ]*\' -exec rm -f \'{}\' \\;<|end_of_text|>')
('Task: 디렉토리 트리 $from_dir의 3단계에서 모든 디렉토리를 찾으세요.', 'find $from_dir -mindepth 3 -maxdepth 3 -type d', 'find $from_dir -mindepth 3 -maxdepth 3 -type d<|end_of_text|>')
('Task: 시스템에서 600MB보다 큰 모든 파일을 찾아라.', 'find / -size +600M', 'find / -size +600M -print<|end_of_text|>')
('Task: 2008년 9월 29일에 접근된 모든 파일을 현재 디렉토리에서 찾습니다.', 'find. -atime 365 -type f -print | xargs ls -l', 'find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30<|end_of_text|>')
("Task: 'postscript'라는 단어가 포함된 설명서 페이지를 찾아보고, 'png' 패턴이 들어 있는 항목의 이름과 설명만 출력합니다.", 'apropos postscript | grep png', 'apropos postscript | grep -i png<|end_of_text|>')
('Task: 파일 이름, 소유자, 바이트 단위 크기를 가진 파일의 표를 표시합니다.', "find. -type f -exec du -h '{}' \\; | column -t", 'du -sh *<|end_of_text|>')
("Task: 'file.dat' 파일을 현재 디렉토리의 각 최상위 디렉토리로 복사합니다.", 'find. -maxdepth 1 -type d | xargs -n 1 cp file.dat', 'ls | xargs -n 1 cp -i file.dat<|end_of_text|>')
('Task: 현재 디렉토리 트리의 모든 파일 이름에 ".txt"를 추가합니다.', 'find. -exec mv {} {}.txt \\;', 'find -type f | xargs -I {} mv {} {}.txt<|end_of_text|>')
('Task: foo라는 디렉토리를 만들어라.', 'mkdir foo', 'mkdir -p foo<|end_of_text|>')
('Task: "/tmp/loop.img"를 "/mnt/image"에 루프 백 디바이스로 마운트합니다.', 'mount /tmp/loop.img /mnt/image -o loop', 'mount /tmp/loop.img /mnt/image -o loop<|end_of_text|>')
('Task: 현재 디렉토리 트리에 있는 모든 일반 파일에서 "string"을 찾습니다.', "find. -type f -print0 | xargs -0 grep -F'string'", 'find . -type f -exec grep string {} \\;<|end_of_text|>')
('Task: 현재 디렉토리의 "dir1" 아래의 모든 일반 파일을 재귀적으로 검색하고, 각 파일의 이름을 디렉토리를 포함하지 않고 출력합니다.', "find./dir1 -type f | xargs -I '{}' basename '{}'", 'find ./dir1 -type f -exec basename {} \\;<|end_of_text|>')
("Task: PATH에서 발견된 'parallel'의 첫 번째 인스턴스를 실행하고, 스크립트나 함수로 전달받은 모든 매개변수를 넘기세요.", 'find $PATH -name parallel | xargs $0', '`which parallel` "$@"<|end_of_text|>')
('Task: 모든 ".txt" 파일의 줄 수를 세어라.', 'find. -name "*.txt" -print0 | xargs -0 wc -l', 'cat *.txt | wc -l<|end_of_text|>')
('Task: "file.txt"을 최대 1 MiB 크기로, 숫자 접미사와 "file"라는 접두사, 그리고 ".txt"라는 추가 접미사가 붙은 파일들로 분할합니다.', 'split -b 1M -d file.txt file.', 'split -b 1M -d  file.txt file --additional-suffix=.txt<|end_of_text|>')
('Task: SIGKILL 신호를 보내어 프로세스 ID 16085를 즉시 종료하기', 'kill -9 16085', 'kill -9 16085<|end_of_text|>')
('Task: /tmp/ 디렉토리 내에서 일반 파일을 재귀적으로 찾습니다.', 'find /tmp -type f', 'find /tmp -type f<|end_of_text|>')
("Task: 현재 디렉토리 트리에서 이름이 'ignore1' 또는 'ignore2'로 끝나지 않는 모든 일반 파일을 삭제하십시오.", 'find. -type f! -name "ignore1"! -name "ignore2" -exec rm -f {} \\;', "find . -type f -not -name '*ignore1' -not -name '*ignore2' | xargs rm<|end_of_text|>")
('Task: 덮어쓰지 않고 "caniwrite"를 "/usr/local/bin"으로 이동합니다.', 'mv caniwrite /usr/local/bin', 'mv -nv caniwrite /usr/local/bin<|end_of_text|>')
('Task: 이력 파일을 읽어 이력 목록에 내용을 추가합니다.', 'history -r file.log', 'history -r<|end_of_text|>')
("Task: '1' 파일의 내용을 출력하라", 'cat 1', '$ cat 1<|end_of_text|>')
('Task: 어제의 날짜 정보 출력', 'date --date yesterday "+%a %d/%m/%Y"', 'date --date yesterday "+%a %d/%m/%Y"<|end_of_text|>')
('Task: 실행 가능한 모든 파일을 검색합니다.', 'find / -perm /a=x', 'find / -perm /a=x<|end_of_text|>')
('Task: 루트 디렉토리 및 두 단계 하위 디렉토리에서 passwd 파일을 검색합니다.', 'find / -maxdepth 3 -name passwd', 'find / -maxdepth 3 -name passwd<|end_of_text|>')
('Task: "/home/david/" 폴더 내에서 "index"로 시작하는 모든 파일을 표시합니다.', "find /home/david/ -name 'index*'", "find /home/david -name 'index*'<|end_of_text|>")
('Task: 현재 폴더와 하위 폴더의 각 *.php 파일의 줄 수를 세고 총계도 출력해라.', 'find. -name "*.php" | xargs wc -l', 'find . -name "*.php" | xargs wc -l<|end_of_text|>')
('Task: find -exec를 활용하여 여러 명령어를 사용해 보십시오', 'find /tmp -type f -name "*.txt" -exec echo {} \\; -exec cat {} \\;', 'find . -name "*.txt" -exec echo {} \\; -exec grep banana {} \\;<|end_of_text|>')
("Task: /myfiles 디렉토리 트리에서 'others'에게 읽기 및 쓰기 권한이 있는 일반 파일을 찾습니다.", 'find /myfiles -type f -perm -o+rw', 'find /myfiles -type f -perm -o+rw<|end_of_text|>')
('Task: 모든 텍스트 파일을 찾습니다.', 'find / -name "*.txt"', 'find . -name "*.txt" -print<|end_of_text|>')
('Task: `find`로 현재 디렉토리 트리에서 찾은 첫 10개의 파일이나 디렉토리를 출력하세요.', 'find. | head -n 10', 'find | head<|end_of_text|>')
("Task: 현재 디렉토리에서 필요에 따라 'es_MX.utf8/LC_MESSAGES' 디렉토리를 생성합니다.", 'mkdir -p es_MX.utf8/LC_MESSAGES', 'mkdir --parents ./es_MX.utf8/LC_MESSAGES<|end_of_text|>')
("Task: /home/madhu/release/workspace 디렉토리 구조 내에서 '.git' 디렉토리를 검색합니다.", "find /home/madhu/release/workspace -type d -name '.git'", "find /home/madhu/release/workspace -type d -name '.git'<|end_of_text|>")
('Task: 디렉토리 내의 모든 일반 파일에 대한 파일 권한을 변경합니다.', 'find /path/to/directory -type f -exec chmod 644 {} \\;', 'find /path/to/directory -type f -exec chmod 644 {} +<|end_of_text|>')
('Task: t로 시작하고 1시간 (60분)과 12시간 (720분) 전에 수정된 모든 파일을 현재 디렉토리에서 찾습니다.', 'find. -mmin -720 -mmin +60 -name t*', 'find . -mmin -720 -mmin +60 -type f -name "t*" -exec ls -l \'{}\' \\;<|end_of_text|>')
('Task: 테스트 디렉토리에서 빈 파일을 찾아라.', 'find test -type f -empty', 'find test -empty<|end_of_text|>')
('Task: 링크 위치에 상대적인 "$dest_dir/$orig_name"이라는 이름으로 "$orig_dest"에 대한 심볼릭 링크를 생성하라.', 'ln -s "$orig_dest" "$dest_dir/$orig_name"', 'ln -r -s "$orig_dest" "$dest_dir/$orig_name"<|end_of_text|>')
('Task: 현재 디렉토리 트리에서 7일 이내에 수정된 *.html 파일을 찾습니다.', 'find. -mtime -7 -name "*.html"', 'find . -mtime -7 -name "*.html" -print<|end_of_text|>')
("Task: 'nullglob' 쉘 옵션을 활성화하세요.", 'shopt -s nullglob', 'shopt -s nullglob<|end_of_text|>')
('Task: 로그인한 각 사용자의 전체 이름과 사용자 이름을 출력하라', "finger | cut -d'' -f3- | uniq", 'finger -l | grep "Name:" | tr -s \' \' | cut -d " " -f 2,4- | sort | uniq<|end_of_text|>')
('Task: 현재 디렉토리와 그 아래에서 이름에 "testfileasdf"가 포함되지 않은 모든 파일을 찾습니다.', 'find. -type f -not -name "*testfileasdf*"', 'find -not -name "*testfileasdf*"<|end_of_text|>')
("Task: 디렉토리 'a'와 'b'의 파일 간 최소한의 차이를 보여줍니다. 공백 차이는 무시하며, 통합 컨텍스트는 0줄로 출력합니다.", 'diff -ub a/ b/', 'diff -dbU0 a b<|end_of_text|>')
("Task: /usr 디렉토리에서 시작하여 'backup'이라는 이름의 문자 특수 파일을 찾아 출력합니다.", 'find /usr -name backup -type c -print', 'find /usr -type c -name backup -print<|end_of_text|>')
('Task: vivek 사용자가 소유한 모든 파일을 찾아라.', 'find / -user vivek', 'find / -user vivek<|end_of_text|>')
('Task: /path/ 폴더에 있는 모든 일반 파일 중 오늘(자정 이후) 수정되지 않은 파일을 나열합니다.', 'find /path/ -type f -daystart -mtime +0 -print0', 'find /path/ -type f -daystart -mtime +0<|end_of_text|>')
('Task: /var/spool/mail"에 있는 모든 파일을 디렉토리 구조와 수정 시간을 그대로 유지하여 "/home/username/mail"로 복사하세요.', 'find /var/spool/mail -type f -print0 | xargs -0 tar -cvf mail.tar\ntar -xf mail.tar -C /home/username/mail', 'find /var/spool/mail -type f | cpio -pvdmB /home/username/mail<|end_of_text|>')
('Task: /usr/src/linux 디렉토리 트리에서 *.html 파일을 찾습니다.', 'find /usr/src/linux -name "*.html"', 'find /usr/src/linux -name "*.html"<|end_of_text|>')
("Task: /home/*//public_html/ 경로에서 '/wp-includes/version.php'로 끝나는 모든 일반 파일을 대상으로, 정규 표현식 '\\$wp_version ='을 검색하여 파일 이름과 함께 일치하는 줄을 표시합니다.", "find /home/*/public_html/ -type f -regex '/wp-includes/version.php$\\|.*wp-version.php' | xargs grep -H '\\$wp_version ='", 'find /home/*/public_html/ -type f -iwholename "*/wp-includes/version.php" -exec grep -H "\\$wp_version =" {} \\;<|end_of_text|>')
('Task: "file.tar.gz"를 압축 해제하고 tar를 풉니다.', 'gzip -dc file.tar.gz | tar -xf -', 'zcat file.tar.gz |tar x<|end_of_text|>')
("Task: 현재 디렉토리에서 경로 이름이 '*/*config'인 파일을 찾아 출력하세요.", 'find. -name "*/*config" -print', "find .  -path '*/*config'<|end_of_text|>")
('Task: 현재 디렉토리에서 최대 2단계 아래에 있는 모든 *.tex 파일/디렉토리를 찾습니다.', 'find. -maxdepth 2 -name \\*.tex', "find . -maxdepth 2 -name '*.tex'<|end_of_text|>")
('Task: 가장 큰 파일 5개 찾기', 'find /home/tecmint/Downloads -type f -printf "%s %p\\n" | sort -rn | head -n 5', 'find . -type f -exec ls -s {} \\; | sort -n -r | head -5<|end_of_text|>')
('Task: "$ORACLE_HOME/include"라는 이름으로 "/usr/include/oracle/11.2/client" 파일에 대한 심볼릭 링크를 생성하라.', 'ln -s /usr/include/oracle/11.2/client $ORACLE_HOME/include', 'sudo ln -s /usr/include/oracle/11.2/client $ORACLE_HOME/include<|end_of_text|>')
('Task: 현재 폴더에서 "myfile" 확장자 뒤에 한 자리 또는 두 자리 숫자가 붙은 모든 파일을 표시합니다.', 'find. -name "myfile[0-9][0-9]"', "find . -regextype sed -regex '.*myfile[0-9]\\{1,2\\}'<|end_of_text|>")
('Task: "filename"을 2바이트 너비의 16진수와 출력 가능한 문자로 덤프하세요.', 'od -t x1 -An filename | tail -n +2 | tr -d \\\\n | fold -w2', 'od -xc filename<|end_of_text|>')
('Task: "kt"라는 단어로 시작하고 숫자가 뒤따르는 폴더의 하위 디렉토리 트리에 있는 현재 폴더의 모든 파일을 표시합니다.', "find. -name 'kt[0-9]*'", "find . -path './kt[0-9] '<|end_of_text|>")
('Task: 현재 디렉토리와 그 아래에서 이름에 "testfile"이 포함된 모든 파일을 대소문자를 구분하지 않고 찾습니다.', 'find -iname *testfile*', 'find -iname "*TESTFILE*"<|end_of_text|>')
('Task: 현재 디렉토리에서 가장 최근에 수정된 파일을 재귀적으로 찾아 수정 시간과 파일 이름을 출력합니다.', "find. -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\\n'| sort -n | tail -n 1", "find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\\n'| sort -n | tail -n1<|end_of_text|>")
("Task: 현재 디렉토리 트리 아래에서 '.old' 확장자를 가진 모든 파일과 디렉토리를 찾아라.", "find. -name '*.old'", 'find . -name ”*.old” -print<|end_of_text|>')
("Task: 'relative/path/to/file'의 심볼릭 링크 대상 경로를 출력하라.", 'readlink -e relative/path/to/file', 'dirname `readlink -e relative/path/to/file`<|end_of_text|>')
('Task: /work 폴더에서 memo로 시작하고 사용자 ann이 소유한 파일을 검색합니다.', "find /work -user ann -name'memo*'", "find /work -name 'memo*' -user ann -print<|end_of_text|>")
('Task: 현재 디렉토리에서 <파일타입>이라는 이름을 가진 모든 파일/디렉토리를 5일 이내에 접근된 것으로 찾아라.', 'find. -atime -5 -name <filetype>', 'find -name "<filetype>" -atime -5<|end_of_text|>')
('Task: "/home/david" 폴더에서 마지막 48시간 동안 접근된 모든 ".c" 파일을 표시합니다.', 'find /home/david -type f -name "*.c" -atime -2', "find /home/david -atime -2 -name '*.c'<|end_of_text|>")
('Task: 모든 ".txt" 파일을 "user@remote.machine:/tmp/newdir/"로 재귀적으로 복사합니다.', 'rsync -rvv *.txt user@remote.machine:/tmp/newdir/', 'rsync -rvv *.txt user@remote.machine:/tmp/newdir/<|end_of_text|>')
('Task: dir_to_start" 디렉토리 트리에서 "file_to_exclude" 파일을 제외하고 모든 파일의 소유자를 "owner"로 변경하세요.', 'find dir_to_start -not -name "file_to_exclude" -print0 | xargs -0 chown owner', 'find dir_to_start -not -name "file_to_exclude"  -print0 | xargs -0 chown owner<|end_of_text|>')
('Task: /myDir 디렉토리 트리에 있는 모든 파일 중 마지막으로 수정된 지 7일 이상 된 파일을 삭제하라', 'find /myDir -type f -mtime +7 -exec rm {} \\;', 'find /myDir -mindepth 1 -mtime +7 -delete<|end_of_text|>')
('Task: _CACHE_* 디렉토리 아래의 모든 파일/디렉토리를 찾아라.', 'find _CACHE_*', 'find _CACHE_*<|end_of_text|>')
('Task: 여러 패턴을 가진 파일 이름을 현재 폴더에서 찾으세요', 'find. -name "my pattern1*" -and -name "pattern2*"', 'find . -name "photo*.jpg"<|end_of_text|>')
('Task: 파일 시스템의 모든 일반 파일의 권한을 변경하세요.', 'find / -type f -exec chmod 644 {} \\;', 'chmod 640 `find ./ -type f -print`<|end_of_text|>')
('Task: 모든 하위 디렉토리의 권한을 700으로 현재 디렉토리에서 설정합니다.', 'find. -type d -exec chmod 700 {} \\;', 'find . -mindepth 1 -type d -print0 | xargs -0 chmod -R 700<|end_of_text|>')
("Task: 현재 폴더에서 파일 이름이 'pdf' 또는 'PDF'로 끝나는 것들을 보여줍니다.", 'find. -name "*.pdf"', "find . -name '*.pdf' -or -name '*.PDF'<|end_of_text|>")
('Task: $DIR 아래에서 첫 번째 파일/디렉토리를 찾아서 $TMP_DIR와 경로가 일치하는지 확인하세요', 'find "$DIR" -maxdepth 1 -type f -print0 | read -r FILE || find "$DIR" -maxdepth 1 -type d -print0 | read -r DIR\nif [[ -n "$FILE" && "$FILE" =~ ^$TMP_DIR ]]; then\n    echo "First file found in $DIR is in $TMP_DIR."\nelif [[ -n "$DIR" && "$DIR" =~ ^$TMP_DIR ]]; then\n    echo "First directory found in $DIR is in $TMP_DIR."\nelse\n    echo "Neither first file nor first directory is in $TMP_DIR."\nfi', '/usr/bin/find $DIR -maxdepth 1 -ipath $TMP_DIR -print -quit<|end_of_text|>')
("Task: 'hello, world'를 출력하는 'echo' 명령어를 실행합니다.", "echo 'hello, world' | echo", "echo 'hello, world' | cat<|end_of_text|>")
('Task: 심볼릭 링크를 따라 /myfiles 디렉토리 트리에서 모든 파일을 찾아라.', 'find -L /myfiles', 'find -L /myfiles<|end_of_text|>')
